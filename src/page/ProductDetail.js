import { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import styles from './styles/ProductDetail.module.css';

function ProductDetail() {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [wbProduct, setWbProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [wbLoading, setWbLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState("wb"); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º WB –≤–∫–ª–∞–¥–∫—É

  useEffect(() => {
    async function fetchProduct() {
      try {
        setLoading(true);
        setError(null);

        if (!id || isNaN(id)) {
          throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞");
        }

        const response = await fetch(`my-telegram-app-production.up.railway.app/api/local/raw/nmInfo?nmId=${id}`);

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const apiData = await response.json();
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API:", apiData);

        const productData = apiData.value || apiData;
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (!productData || (!productData.nmId && !productData.price)) {
          console.log("–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É");
          setProduct(null);
        } else {
          setProduct(productData);
        }

      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", err);
        setProduct(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å WB –¥–∞–Ω–Ω—ã–µ
      } finally {
        setLoading(false);
      }
    }

    fetchProduct();
  }, [id]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ WB —Ç–æ–≤–∞—Ä–∞
  const fetchWbProduct = async () => {
    try {
      setWbLoading(true);
      const response = await fetch(`my-telegram-app-production.up.railway.app/api/wb/product?nmId=${id}`);
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Wildberries');
      }

      const data = await response.json();
      setWbProduct(data.product);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ WB —Ç–æ–≤–∞—Ä–∞:", err);
      setWbProduct(null);
    } finally {
      setWbLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º WB —Ç–æ–≤–∞—Ä –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchWbProduct();
  }, [id]);

  const formatNumber = (num) => {
    if (num !== undefined && num !== null) {
      return num.toLocaleString();
    }
    return "0";
  };

  const formatPrice = (price) => {
    if (price !== undefined && price !== null) {
      return price.toLocaleString();
    }
    return "0";
  };

  if (loading) {
    return (
      <div className={styles.loadingContainer}>
        <p className={styles.loadingText}>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...</p>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö, –Ω–∏ WB)
  if (!product && !wbProduct && !wbLoading) {
    return (
      <div className={styles.errorContainer}>
        <p className={styles.errorText}>
          ‚ùå –¢–æ–≤–∞—Ä —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω
        </p>
        <div className={styles.errorSuggestions}>
          <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
          <ul>
            <li>–¢–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</li>
            <li>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Wildberries</li>
            <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —Ç–æ–≤–∞—Ä–∞</li>
            <li>–°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</li>
          </ul>
        </div>
        <Link to="/" className={styles.backLink}>
          <button className={styles.secondaryButton}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
          </button>
        </Link>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* –¢–∞–±—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
      <div className={styles.tabContainer}>
        {/* –í–∫–ª–∞–¥–∫–∞ WB –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å WB –¥–∞–Ω–Ω—ã–µ */}
        {(wbProduct || wbLoading) && (
          <button
            onClick={() => setActiveTab("wb")}
            className={`${styles.tabButton} ${activeTab === "wb" ? styles.tabButtonActive : styles.tabButtonInactive}`}
          >
            WB –ò–Ω—Ñ–æ
          </button>
        )}
        
        {/* –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
        {product && (
          <>
            <button
              onClick={() => setActiveTab("main")}
              className={`${styles.tabButton} ${activeTab === "main" ? styles.tabButtonActive : styles.tabButtonInactive}`}
            >
              –û—Å–Ω–æ–≤–Ω–æ–µ
            </button>
            <button
              onClick={() => setActiveTab("stocks")}
              className={`${styles.tabButton} ${activeTab === "stocks" ? styles.tabButtonActive : styles.tabButtonInactive}`}
            >
              –°–∫–ª–∞–¥—ã
            </button>
            <button
              onClick={() => setActiveTab("financial")}
              className={`${styles.tabButton} ${activeTab === "financial" ? styles.tabButtonActive : styles.tabButtonInactive}`}
            >
              –§–∏–Ω–∞–Ω—Å—ã
            </button>
          </>
        )}
      </div>

      <div className={styles.content}>
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) */}
        {activeTab === "main" && product && (
          <div>
            <div className={styles.card}>
              <h2 className={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              
              <div className={styles.gridContainer}>
                <InfoRow label="–ê—Ä—Ç–∏–∫—É–ª (nmId)" value={product.nmId} />
                <InfoRow label="–¶–µ–Ω–∞" value={`${product.price} ‚ÇΩ`} />
                <InfoRow label="–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π" value={`${product.discountedPrice} ‚ÇΩ`} />
                <InfoRow label="–°–∫–∏–¥–∫–∞" value={`${product.discount}%`} />
                <InfoRow label="SPP" value={`${product.spp}%`} />
                <InfoRow label="–ö–æ–¥ 1–°" value={product.code1c} />
                <InfoRow label="–ê—Ä—Ç–∏–∫—É–ª 1–°" value={product.article1c} />
                <InfoRow label="–í–µ–Ω–¥–æ—Ä –∫–æ–¥" value={product.vendorCode} />
              </div>
            </div>

            {/* –®—Ç—Ä–∏—Ö–∫–æ–¥—ã */}
            {product.barcode && product.barcode.length > 0 && (
              <div className={styles.card}>
                <h3 className={styles.subtitle}>–®—Ç—Ä–∏—Ö–∫–æ–¥—ã</h3>
                <div className={styles.barcodeContainer}>
                  {product.barcode.map((barcode, index) => (
                    <span key={index} className={styles.barcode}>
                      {barcode}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* –û—Å—Ç–∞—Ç–∫–∏ */}
            <div className={styles.card}>
              <h3 className={styles.subtitle}>–û—Å—Ç–∞—Ç–∫–∏</h3>
              <div className={styles.gridTwoColumns}>
                <InfoRow label="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" value={formatNumber(product.stocksEkb)} />
                <InfoRow label="–ú–æ—Å–∫–≤–∞" value={formatNumber(product.stocksMsc)} />
                <InfoRow label="FBO" value={formatNumber(product.stocksFbo)} />
                <InfoRow label="FBS" value={formatNumber(product.stocksFbs)} />
              </div>
            </div>

            {/* –ó–∞–∫–∞–∑—ã */}
            <div className={styles.card}>
              <h3 className={styles.subtitle}>–ó–∞–∫–∞–∑—ã</h3>
              <div className={styles.gridTwoColumns}>
                <InfoRow label="–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã" value={formatNumber(product.currentOrdersCount)} />
                <InfoRow label="–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã" value={formatNumber(product.previousOrdersCount)} />
              </div>
            </div>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–∞—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) */}
        {activeTab === "stocks" && product && product.warehouses && (
          <div className={styles.card}>
            <h2 className={styles.sectionTitle}>–°–∫–ª–∞–¥—ã ({product.warehouses.length})</h2>
            <div className={styles.warehouseList}>
              {product.warehouses.map((warehouse, index) => (
                <div 
                  key={index} 
                  className={`${styles.warehouseItem} ${index % 2 === 0 ? styles.warehouseItemEven : styles.warehouseItemOdd}`}
                >
                  <div className={styles.warehouseName}>{warehouse.warehouse}</div>
                  <div className={styles.warehouseDetails}>
                    <span>ID: {warehouse.warehouseId}</span>
                    <span>–û—Å—Ç–∞—Ç–æ–∫: <strong>{warehouse.stock}</strong></span>
                    <span className={styles.warehouseBarcode}>
                      –®—Ç—Ä–∏—Ö–∫–æ–¥: {warehouse.barcode}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) */}
        {activeTab === "financial" && product && (
          <div className={styles.card}>
            <h2 className={styles.sectionTitle}>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div className={styles.gridContainer}>
              <InfoRow label="KP" value={formatNumber(product.kp)} />
              <InfoRow label="DU" value={formatNumber(product.du)} />
              <InfoRow label="KP Fact" value={formatNumber(product.kpFact)} />
              <InfoRow label="KP No Tax Expenses" value={formatNumber(product.kpNoTaxExpeses)} />
            </div>

            {/* –î—É–±–ª–∏–∫–∞—Ç—ã */}
            {product.duplicates && product.duplicates.length > 0 && (
              <div className={styles.duplicatesSection}>
                <h3 className={styles.subtitle}>–î—É–±–ª–∏–∫–∞—Ç—ã</h3>
                {product.duplicates.map((duplicate, index) => (
                  <div key={index} className={styles.duplicateItem}>
                    nmId: {duplicate.nmId} - {duplicate.cabinet}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* WB –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å WB –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ */}
        {activeTab === "wb" && (
          <div>
            {wbLoading ? (
              <div className={styles.loadingContainer}>
                <p className={styles.loadingText}>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å Wildberries...</p>
              </div>
            ) : wbProduct ? (
              <div>
                {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
                <div className={styles.card}>
                  <h2 className={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å Wildberries</h2>
                  
                  <div className={styles.wbHeader}>
                    <div className={styles.wbBrandInfo}>
                      <div className={styles.wbBrand}>{wbProduct.brand}</div>
                      <div className={styles.wbName}>{wbProduct.name}</div>
                      <div className={styles.wbSubject}>{wbProduct.subject}</div>
                    </div>
                    
                    {/* –¶–µ–Ω–∞ –∏ —Å–∫–∏–¥–∫–∞ */}
                    <div className={styles.wbPriceSection}>
                      {wbProduct.discount > 0 ? (
                        <>
                          <div className={styles.wbOldPrice}>
                            {formatPrice(wbProduct.basicPrice)} ‚ÇΩ
                          </div>
                          <div className={styles.wbCurrentPrice}>
                            {formatPrice(wbProduct.productPrice)} ‚ÇΩ
                          </div>
                          {/* <div className={styles.wbDiscount}>
                            -{wbProduct.discount}% ({formatPrice(wbProduct.discountAmount)} ‚ÇΩ)
                          </div> */}
                        </>
                      ) : (
                        <div className={styles.wbCurrentPrice}>
                          {formatPrice(wbProduct.productPrice)} ‚ÇΩ
                        </div>
                      )}
                    </div>
                  </div>

                  {/* –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã */}
                  <div className={styles.wbRatings}>
                    <div className={styles.gridTwoColumns}>
                      <InfoRow label="–†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞" value={`${wbProduct.rating}`} />
                      <InfoRow label="–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤" value={wbProduct.reviewRating} />
                      <InfoRow label="–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤" value={formatNumber(wbProduct.feedbacks)} />
                      <InfoRow label="–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞" value={`${wbProduct.supplierRating}`} />
                    </div>
                  </div>

                  {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className={styles.gridTwoColumns}>
                    <InfoRow label="–ü–æ—Å—Ç–∞–≤—â–∏–∫" value={wbProduct.supplier} />
                    {/* <InfoRow label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" value={wbProduct.pics} /> */}
                    <InfoRow label="–û–±—ä–µ–º" value={wbProduct.volume ? `${wbProduct.volume} —Å–º¬≥` : "‚Äî"} />
                    <InfoRow label="–í–µ—Å" value={wbProduct.weight ? `${wbProduct.weight} –∫–≥` : "‚Äî"} />
                    {/* <InfoRow label="–î–æ—Å—Ç–∞–≤–∫–∞" value={wbProduct.time1 ? `${wbProduct.time1}-${wbProduct.time2} –¥–Ω.` : "‚Äî"} /> */}
                    <InfoRow label="–û—Å—Ç–∞—Ç–æ–∫" value={formatNumber(wbProduct.totalQuantity)} />
                  </div>
                </div>

                {/* –°–∫–ª–∞–¥—ã WB */}
                {wbProduct.warehouses && wbProduct.warehouses.length > 0 && (
                  <div className={styles.card}>
                    <h3 className={styles.subtitle}>–°–∫–ª–∞–¥—ã Wildberries ({wbProduct.warehouses.length})</h3>
                    <div className={styles.warehouseList}>
                      {wbProduct.warehouses.map((warehouse, index) => (
                        <div 
                          key={index} 
                          className={`${styles.warehouseItem} ${index % 2 === 0 ? styles.warehouseItemEven : styles.warehouseItemOdd}`}
                        >
                          <div className={styles.warehouseDetails}>
                            <span>–°–∫–ª–∞–¥ ID: {warehouse.warehouse_id}</span>
                            <span>–û—Å—Ç–∞—Ç–æ–∫: <strong>{warehouse.quantity}</strong></span>
                            {/* {warehouse.time1 && (
                              <span className={styles.deliveryTime}>
                                –î–æ—Å—Ç–∞–≤–∫–∞: {warehouse.time1}-{warehouse.time2} –¥–Ω.
                              </span>
                            )} */}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* –ê–∫—Ü–∏–∏ */}
                {/* {wbProduct.promotions && wbProduct.promotions.length > 0 && (
                  <div className={styles.card}>
                    <h3 className={styles.subtitle}>–ê–∫—Ü–∏–∏ ({wbProduct.promotions.length})</h3>
                    <div className={styles.promotionsInfo}>
                      –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ {wbProduct.promotions.length} –∞–∫—Ü–∏—è—Ö
                    </div>
                  </div>
                )} */}
              </div>
            ) : (
              <div className={styles.card}>
                <div className={styles.errorContainer}>
                  <p className={styles.errorText}>
                    –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å Wildberries
                  </p>
                  <button 
                    onClick={fetchWbProduct}
                    className={styles.retryButton}
                  >
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className={styles.actions}>
          <button 
            onClick={() => {
              const wbUrl = `https://www.wildberries.ru/catalog/${id}/detail.aspx`;
              if (window.Telegram?.WebApp) {
                window.Telegram.WebApp.openLink(wbUrl);
              } else {
                window.open(wbUrl, '_blank');
              }
            }}
            className={styles.primaryButton}
          >
            –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Wildberries
          </button>

          <Link to="/" className={styles.backLink}>
            <button className={styles.secondaryButton}>
              ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
}

function InfoRow({ label, value }) {
  return (
    <div className={styles.infoRow}>
      <span className={styles.infoRowLabel}>{label}:</span>
      <span className={styles.infoRowValue}>{value || "‚Äî"}</span>
    </div>
  );
}

export default ProductDetail;