import { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";

function ProductDetail() {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState("main");

  useEffect(() => {
    async function fetchProduct() {
      try {
        setLoading(true);
        setError(null);

        if (!id || isNaN(id)) {
          throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞");
        }

        //https://my-telegram-app-production.up.railway.app/
        //const response = await fetch(`http://localhost:5000/api/local/raw/nmInfo?nmId=${id}`);
        const response = await fetch(`http://localhost:5000/api/local/raw/nmInfo?nmId=${id}`);

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const apiData = await response.json();
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API:", apiData);

        const productData = apiData.value || apiData;
        setProduct(productData);

      } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err);
        setError(err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä");
      } finally {
        setLoading(false);
      }
    }

    fetchProduct();
  }, [id]);

  const formatNumber = (num) => {
    if (num !== undefined && num !== null) {
      return num.toLocaleString();
    }
    return "0";
  };

  // –°—Ç–∏–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegram CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const styles = {
    container: {
      padding: "0",
      minHeight: "100vh",
      backgroundColor: "var(--tg-theme-bg-color, #ffffff)",
      color: "var(--tg-theme-text-color, #000000)"
    },
    tabContainer: {
      display: "flex", 
      borderBottom: "1px solid var(--tg-theme-hint-color, #dddddd)",
      backgroundColor: "var(--tg-theme-secondary-bg-color, #f8f9fa)"
    },
    tabButton: (isActive) => ({
      flex: 1,
      padding: "12px",
      border: "none",
      backgroundColor: isActive 
        ? "var(--tg-theme-button-color, #2481cc)" 
        : "var(--tg-theme-secondary-bg-color, #f8f9fa)",
      color: isActive 
        ? "var(--tg-theme-button-text-color, #ffffff)" 
        : "var(--tg-theme-text-color, #000000)",
      cursor: "pointer",
      fontSize: "14px"
    }),
    card: {
      backgroundColor: "var(--tg-theme-secondary-bg-color, #ffffff)",
      padding: "15px",
      borderRadius: "10px",
      marginBottom: "15px",
      border: "1px solid var(--tg-theme-hint-color, #e0e0e0)"
    },
    sectionTitle: {
      marginBottom: "15px",
      color: "var(--tg-theme-text-color, #000000)",
      fontSize: "18px",
      fontWeight: "600"
    },
    subtitle: {
      marginBottom: "10px",
      color: "var(--tg-theme-text-color, #000000)",
      fontSize: "16px",
      fontWeight: "500"
    },
    barcode: {
      padding: "4px 8px",
      backgroundColor: "var(--tg-theme-bg-color, #f0f0f0)",
      color: "var(--tg-theme-text-color, #000000)",
      borderRadius: "4px",
      fontSize: "12px",
      fontFamily: "monospace"
    },
    warehouseItem: (index) => ({
      padding: "12px",
      border: "1px solid var(--tg-theme-hint-color, #eeeeee)",
      borderRadius: "8px",
      marginBottom: "10px",
      backgroundColor: index % 2 === 0 
        ? "var(--tg-theme-bg-color, #f9f9f9)" 
        : "var(--tg-theme-secondary-bg-color, #ffffff)",
      color: "var(--tg-theme-text-color, #000000)"
    }),
    duplicateItem: {
      padding: "8px",
      backgroundColor: "var(--tg-theme-bg-color, #f0f0f0)",
      color: "var(--tg-theme-text-color, #000000)",
      borderRadius: "4px",
      marginBottom: "5px",
      fontSize: "14px"
    },
    primaryButton: {
      padding: "16px",
      width: "100%",
      backgroundColor: "var(--tg-theme-button-color, #2481cc)",
      color: "var(--tg-theme-button-text-color, #ffffff)",
      border: "none",
      borderRadius: "10px",
      cursor: "pointer",
      fontSize: "18px",
      fontWeight: "bold",
      marginBottom: "15px"
    },
    secondaryButton: {
      padding: "12px",
      width: "100%",
      backgroundColor: "var(--tg-theme-secondary-bg-color, #f0f0f0)",
      color: "var(--tg-theme-text-color, #000000)",
      border: "none",
      borderRadius: "8px",
      cursor: "pointer"
    },
    errorText: {
      color: "var(--tg-theme-destructive-text-color, #ff0000)",
      textAlign: "center",
      padding: "20px"
    },
    loadingText: {
      color: "var(--tg-theme-text-color, #000000)",
      textAlign: "center"
    }
  };

  if (loading) {
    return (
      <div style={{ padding: "40px 20px", textAlign: "center" }}>
        <p style={styles.loadingText}>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ padding: "20px" }}>
        <p style={styles.errorText}>
          ‚ùå {error}
        </p>
        <Link to="/" style={{ display: "block", textAlign: "center", marginTop: "20px" }}>
          <button style={styles.secondaryButton}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
          </button>
        </Link>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      {/* –¢–∞–±—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ */}
      <div style={styles.tabContainer}>
        <button
          onClick={() => setActiveTab("main")}
          style={styles.tabButton(activeTab === "main")}
        >
          –û—Å–Ω–æ–≤–Ω–æ–µ
        </button>
        <button
          onClick={() => setActiveTab("stocks")}
          style={styles.tabButton(activeTab === "stocks")}
        >
          –°–∫–ª–∞–¥—ã
        </button>
        <button
          onClick={() => setActiveTab("financial")}
          style={styles.tabButton(activeTab === "financial")}
        >
          –§–∏–Ω–∞–Ω—Å—ã
        </button>
      </div>

      <div style={{ padding: "20px" }}>
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {activeTab === "main" && (
          <div>
            <div style={styles.card}>
              <h2 style={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              
              <div style={{ display: "grid", gap: "8px" }}>
                <InfoRow label="–ê—Ä—Ç–∏–∫—É–ª (nmId)" value={product.nmId} />
                <InfoRow label="–¶–µ–Ω–∞" value={`${product.price} ‚ÇΩ`} />
                <InfoRow label="–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π" value={`${product.discountedPrice} ‚ÇΩ`} />
                <InfoRow label="–°–∫–∏–¥–∫–∞" value={`${product.discount}%`} />
                <InfoRow label="SPP" value={`${product.spp}%`} />
                <InfoRow label="–ö–æ–¥ 1–°" value={product.code1c} />
                <InfoRow label="–ê—Ä—Ç–∏–∫—É–ª 1–°" value={product.article1c} />
                <InfoRow label="–í–µ–Ω–¥–æ—Ä –∫–æ–¥" value={product.vendorCode} />
              </div>
            </div>

            {/* –®—Ç—Ä–∏—Ö–∫–æ–¥—ã */}
            {product.barcode && product.barcode.length > 0 && (
              <div style={styles.card}>
                <h3 style={styles.subtitle}>–®—Ç—Ä–∏—Ö–∫–æ–¥—ã</h3>
                <div style={{ display: "flex", flexWrap: "wrap", gap: "8px" }}>
                  {product.barcode.map((barcode, index) => (
                    <span key={index} style={styles.barcode}>
                      {barcode}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* –û—Å—Ç–∞—Ç–∫–∏ */}
            <div style={styles.card}>
              <h3 style={styles.subtitle}>–û—Å—Ç–∞—Ç–∫–∏</h3>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "10px" }}>
                <InfoRow label="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" value={formatNumber(product.stocksEkb)} />
                <InfoRow label="–ú–æ—Å–∫–≤–∞" value={formatNumber(product.stocksMsc)} />
                <InfoRow label="FBO" value={formatNumber(product.stocksFbo)} />
                <InfoRow label="FBS" value={formatNumber(product.stocksFbs)} />
              </div>
            </div>

            {/* –ó–∞–∫–∞–∑—ã */}
            <div style={styles.card}>
              <h3 style={styles.subtitle}>–ó–∞–∫–∞–∑—ã</h3>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "10px" }}>
                <InfoRow label="–¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã" value={formatNumber(product.currentOrdersCount)} />
                <InfoRow label="–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã" value={formatNumber(product.previousOrdersCount)} />
              </div>
            </div>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–∞—Ö */}
        {activeTab === "stocks" && product.warehouses && (
          <div style={styles.card}>
            <h2 style={styles.sectionTitle}>–°–∫–ª–∞–¥—ã ({product.warehouses.length})</h2>
            <div style={{ maxHeight: "400px", overflowY: "auto" }}>
              {product.warehouses.map((warehouse, index) => (
                <div key={index} style={styles.warehouseItem(index)}>
                  <div style={{ fontWeight: "bold", marginBottom: "5px" }}>{warehouse.warehouse}</div>
                  <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "5px", fontSize: "14px" }}>
                    <span>ID: {warehouse.warehouseId}</span>
                    <span>–û—Å—Ç–∞—Ç–æ–∫: <strong>{warehouse.stock}</strong></span>
                    <span style={{ gridColumn: "1 / -1", fontFamily: "monospace", fontSize: "12px" }}>
                      –®—Ç—Ä–∏—Ö–∫–æ–¥: {warehouse.barcode}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {activeTab === "financial" && (
          <div style={styles.card}>
            <h2 style={styles.sectionTitle}>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div style={{ display: "grid", gap: "10px" }}>
              <InfoRow label="KP" value={formatNumber(product.kp)} />
              <InfoRow label="DU" value={formatNumber(product.du)} />
              <InfoRow label="KP Fact" value={formatNumber(product.kpFact)} />
              <InfoRow label="KP No Tax Expenses" value={formatNumber(product.kpNoTaxExpeses)} />
            </div>

            {/* –î—É–±–ª–∏–∫–∞—Ç—ã */}
            {product.duplicates && product.duplicates.length > 0 && (
              <div style={{ marginTop: "15px" }}>
                <h3 style={styles.subtitle}>–î—É–±–ª–∏–∫–∞—Ç—ã</h3>
                {product.duplicates.map((duplicate, index) => (
                  <div key={index} style={styles.duplicateItem}>
                    nmId: {duplicate.nmId} - {duplicate.cabinet}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div style={{ marginTop: "20px" }}>
          <button 
            onClick={() => {
              const wbUrl = `https://www.wildberries.ru/catalog/${id}/detail.aspx`;
              if (window.Telegram?.WebApp) {
                window.Telegram.WebApp.openLink(wbUrl);
              } else {
                window.open(wbUrl, '_blank');
              }
            }}
            style={styles.primaryButton}
          >
            –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Wildberries
          </button>

          <Link to="/" style={{ display: "block", textDecoration: "none" }}>
            <button style={styles.secondaryButton}>
              ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function InfoRow({ label, value }) {
  const rowStyle = {
    display: "flex", 
    justifyContent: "space-between",
    padding: "4px 0",
    borderBottom: "1px solid var(--tg-theme-hint-color, #f0f0f0)"
  };

  const labelStyle = {
    color: "var(--tg-theme-hint-color, #666666)"
  };

  const valueStyle = {
    fontWeight: "500",
    color: "var(--tg-theme-text-color, #000000)"
  };

  return (
    <div style={rowStyle}>
      <span style={labelStyle}>{label}:</span>
      <span style={valueStyle}>{value || "‚Äî"}</span>
    </div>
  );
}

export default ProductDetail;