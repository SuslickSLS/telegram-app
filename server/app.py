from flask import Flask, jsonify, request
from flask_cors import CORS
import requests
import os
import json
import hmac
import hashlib
from datetime import datetime, timedelta


app = Flask(__name__)
CORS(app)

ALLOWED_USERS = {
    5429222882: {"username": "Suslick", "name": "SuslickSLS", "role": "admin"},
    987654321: {"username": "manager", "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "role": "manager"},
}

access_cache = {}

@app.route('/api/check-access', methods=['POST'])
def check_access():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ Mini App
    """
    try:
        data = request.json
        user_id = data.get('user_id')
        init_data = data.get('initData')
        
        if not user_id:
            return jsonify({'access': False, 'error': 'No user ID'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ (5 –º–∏–Ω—É—Ç)
        cache_key = f"user_{user_id}"
        if cache_key in access_cache:
            cached_data = access_cache[cache_key]
            if datetime.now() - cached_data['timestamp'] < timedelta(minutes=5):
                return jsonify({'access': cached_data['access'], 'user': cached_data['user']})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        if not verify_telegram_init_data(init_data):
            return jsonify({'access': False, 'error': 'Invalid signature'}), 403
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
        user_info = ALLOWED_USERS.get(user_id)
        
        if user_info:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            access_cache[cache_key] = {
                'access': True,
                'user': user_info,
                'timestamp': datetime.now()
            }
            
            return jsonify({
                'access': True,
                'user': user_info,
                'message': f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info["name"]}!'
            })
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            access_cache[cache_key] = {
                'access': False,
                'user': None,
                'timestamp': datetime.now()
            }
            
            return jsonify({
                'access': False,
                'error': 'User not in whitelist'
            }), 403
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        return jsonify({'access': False, 'error': 'Internal server error'}), 500

def verify_telegram_init_data(init_data):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram Web App
    """
    try:
        # –í–∞—à bot token –∏–∑ @BotFather
        bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        
        if not bot_token or not init_data:
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º initData
        params = {}
        for pair in init_data.split('&'):
            key, value = pair.split('=')
            params[key] = value
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        received_hash = params.get('hash')
        if not received_hash:
            return False
        
        # –£–¥–∞–ª—è–µ–º hash –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        del params['hash']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(params.items())])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new(
            key=b"WebAppData",
            msg=bot_token.encode(),
            digestmod=hashlib.sha256
        ).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        computed_hash = hmac.new(
            key=secret_key,
            msg=data_check_string.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()
        
        return computed_hash == received_hash
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

@app.route('/api/admin/users', methods=['GET'])
def get_allowed_users():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
    """
    return jsonify({
        'users': ALLOWED_USERS,
        'total': len(ALLOWED_USERS)
    })

@app.route('/api/admin/add-user', methods=['POST'])
def add_user():
    """
    –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    """
    try:
        data = request.json
        user_id = data.get('user_id')
        username = data.get('username')
        name = data.get('name')
        role = data.get('role', 'user')
        
        if not user_id:
            return jsonify({'error': 'User ID required'}), 400
        
        ALLOWED_USERS[user_id] = {
            'username': username,
            'name': name,
            'role': role,
            'added_at': datetime.now().isoformat()
        }
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cache_key = f"user_{user_id}"
        access_cache.pop(cache_key, None)
        
        return jsonify({'success': True, 'user': ALLOWED_USERS[user_id]})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500



# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API —Å HTTPS –∏ –ø–æ—Ä—Ç–æ–º 8443
LOCAL_API_URL = "https://192.168.171.248:8443"

@app.route('/')
def home():
    return jsonify({
        'message': 'WB Telegram Mini App Backend',
        'endpoints': {
            'health': '/api/health',
            'product': '/api/product/<id>',
            'DenCool': '/api/DenCool/<id>',
            'debug': '/api/debug/wb',
            'local_raw': '/api/local/raw/nmInfo?nmId=224851397',
            'local_health': '/api/local/health'
        }
    })

@app.route('/api/local/raw/nmInfo', methods=['GET'])
def local_raw_nm_info():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API –∫–∞–∫ –µ—Å—Ç—å
    """
    try:
        nm_id = request.args.get('nmId')
        if not nm_id:
            return jsonify({'error': 'nmId parameter is required'}), 400
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API
        target_url = f"{LOCAL_API_URL}/api/nmInfo?nmId={nm_id}"
        
        print(f"üîó –ó–∞–ø—Ä–æ—Å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API: {target_url}")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL (–¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)
        response = requests.get(
            target_url,
            headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json',
            },
            timeout=10,
            verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code != 200:
            return jsonify({
                'error': f'–õ–æ–∫–∞–ª—å–Ω—ã–π API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}',
                'status_code': response.status_code,
                'url': target_url
            }), 502
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
        raw_data = response.json()
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API")
        
        result = {
            **raw_data,
            '_metadata': {
                'source': 'local_api',
                'status': 'success',
                'local_api_url': LOCAL_API_URL,
                'nm_id_requested': nm_id
            }
        }
        
        return jsonify(result)
            
    except requests.exceptions.SSLError as e:
        print(f"üîí –û—à–∏–±–∫–∞ SSL: {e}")
        return jsonify({
            'error': 'SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API',
            'solution': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π',
            'local_api_url': LOCAL_API_URL,
            '_metadata': {
                'source': 'error',
                'status': 'ssl_error'
            }
        }), 503
        
    except requests.exceptions.ConnectionError as e:
        print(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return jsonify({
            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API',
            'solution': '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä 192.168.171.248:8443 –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω',
            'local_api_url': LOCAL_API_URL,
            '_metadata': {
                'source': 'error',
                'status': 'connection_failed'
            }
        }), 503
        
    except requests.exceptions.Timeout:
        return jsonify({
            'error': '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API',
            'local_api_url': LOCAL_API_URL,
            '_metadata': {
                'source': 'error', 
                'status': 'timeout'
            }
        }), 504
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API: {str(e)}',
            'local_api_url': LOCAL_API_URL,
            '_metadata': {
                'source': 'error',
                'status': 'exception'
            }
        }), 500

@app.route('/api/local/health', methods=['GET'])
def local_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API"""
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
        response = requests.get(
            f"{LOCAL_API_URL}/api/health", 
            timeout=5,
            verify=False
        )
        
        health_info = {
            'local_api_status': 'available' if response.status_code == 200 else 'unavailable',
            'status_code': response.status_code,
            'local_api_url': LOCAL_API_URL,
            'protocol': 'https'
        }
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ nmInfo
        if response.status_code == 200:
            try:
                nm_test = requests.get(
                    f"{LOCAL_API_URL}/api/nmInfo?nmId=224851397", 
                    timeout=3,
                    verify=False
                )
                health_info['nm_info_endpoint'] = 'available' if nm_test.status_code == 200 else 'unavailable'
                health_info['nm_info_status'] = nm_test.status_code
            except Exception as e:
                health_info['nm_info_endpoint'] = 'unavailable'
                health_info['nm_info_error'] = str(e)
        
        return jsonify(health_info)
        
    except requests.exceptions.SSLError as e:
        return jsonify({
            'local_api_status': 'ssl_error',
            'local_api_url': LOCAL_API_URL,
            'error': f'SSL –æ—à–∏–±–∫–∞: {str(e)}',
            'solution': '–°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'
        }), 503
        
    except Exception as e:
        return jsonify({
            'local_api_status': 'unavailable',
            'local_api_url': LOCAL_API_URL,
            'error': str(e),
            'solution': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å–µ—Ç–∏'
        }), 503

@app.route('/api/local/debug', methods=['GET'])
def local_debug():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API"""
    try:
        nm_id = request.args.get('nmId', '224851397')
        target_url = f"{LOCAL_API_URL}/api/nmInfo?nmId={nm_id}"
        
        debug_info = {
            'target_url': target_url,
            'local_api_url': LOCAL_API_URL,
            'ssl_verify': False
        }
        
        try:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
            response = requests.get(target_url, timeout=10, verify=False)
            debug_info['response'] = {
                'status_code': response.status_code,
                'headers': dict(response.headers),
                'content_preview': response.text[:500] if response.text else 'empty'
            }
            
            if response.status_code == 200:
                try:
                    debug_info['response']['json_data'] = response.json()
                except:
                    debug_info['response']['json_error'] = 'Cannot parse JSON'
                    
        except requests.exceptions.SSLError as e:
            debug_info['ssl_error'] = str(e)
        except requests.exceptions.ConnectionError as e:
            debug_info['connection_error'] = str(e)
        except Exception as e:
            debug_info['other_error'] = str(e)
        
        return jsonify(debug_info)
        
    except Exception as e:
        return jsonify({'error': f'Debug error: {str(e)}'}), 500

# server/app.py - –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.route('/api/wb/product', methods=['GET'])
def get_wb_product():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å Wildberries API
    """
    try:
        nm_id = request.args.get('nmId')
        if not nm_id:
            return jsonify({'error': 'nmId parameter is required'}), 400
        
        print(f"üîç –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ {nm_id} —Å WB API")
        
        # URL Wildberries API –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        wb_url = f"https://card.wb.ru/cards/v4/detail?appType=1&curr=rub&dest=-5818883&spp=30&ab_testing=false&lang=ru&nm={nm_id}"
        
        response = requests.get(
            wb_url,
            headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json',
            },
            timeout=10
        )
        
        if response.status_code != 200:
            return jsonify({
                'error': f'WB API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}',
                'status_code': response.status_code
            }), 502
        
        data = response.json()
        
        if not data.get('products') or len(data['products']) == 0:
            return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        product = data['products'][0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ —Å–∫–ª–∞–¥–∞—Ö
        sizes = product.get('sizes', [])
        price_info = sizes[0].get('price', {}) if sizes else {}
        stocks = sizes[0].get('stocks', []) if sizes else []
        
        basic_price = price_info.get('basic', 0) // 100
        product_price = price_info.get('product', 0) // 100
        discount = round((1 - product_price / basic_price) * 100, 1) if basic_price > 0 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–∞—Ö
        warehouses = []
        for stock in stocks:
            warehouses.append({
                'warehouse_id': stock.get('wh'),
                'quantity': stock.get('qty', 0),
                'time1': stock.get('time1'),
                'time2': stock.get('time2')
            })
        
        result = {
            'id': product.get('id'),
            'brand': product.get('brand'),
            'name': product.get('name'),
            'rating': product.get('rating'),
            'reviewRating': product.get('reviewRating'),
            'feedbacks': product.get('feedbacks'),
            'totalQuantity': product.get('totalQuantity'),
            'basicPrice': basic_price,
            'productPrice': product_price,
            'discount': discount,
            'discountAmount': basic_price - product_price if basic_price > product_price else 0,
            'supplier': product.get('supplier'),
            'supplierRating': product.get('supplierRating'),
            'pics': product.get('pics', 0),
            'subject': product.get('entity'),
            'subjectId': product.get('subjectId'),
            'volume': product.get('volume'),
            'weight': product.get('weight'),
            'time1': product.get('time1'),
            'time2': product.get('time2'),
            'promotions': product.get('promotions', []),
            'warehouses': warehouses,
            'sizesCount': len(sizes),
            'hasStocks': len(stocks) > 0
        }
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä {product.get('name')} —Å WB API")
        
        return jsonify({
            'product': result,
            '_metadata': {
                'source': 'wildberries_api',
                'status': 'success'
            }
        })
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API: {str(e)}'}), 500

@app.route('/api/product/<int:product_id>', methods=['GET'])
def get_product(product_id):
    try:
        print(f"üîç –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ {product_id}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π URL WB API
        wb_url = f"https://card.wb.ru/cards/v4/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={product_id}"
        
        print(f"üîÑ –ü—Ä–æ–±—É–µ–º URL: {wb_url}")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        response = requests.get(
            wb_url,
            headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'Referer': 'https://www.wildberries.ru/',
                'Origin': 'https://www.wildberries.ru',
                'Sec-Fetch-Dest': 'empty',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-site',
            },
            timeout=10
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code != 200:
            return jsonify({
                'error': f'WB API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}',
                'status_code': response.status_code,
                'product_id': product_id
            }), 502
            
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = response.json()
            print(f"üì¶ JSON –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}")
            return jsonify({
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API',
                'response_preview': response.text[:200]
            }), 502
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not data:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç WB API'}), 404
            
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        product_data = None
        if data.get('data', {}).get('products'):
            product_data = data['data']['products'][0]
        elif data.get('products'):
            product_data = data['products'][0]
        else:
            print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {json.dumps(data, ensure_ascii=False)[:500]}")
            return jsonify({
                'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WB API',
                'data_structure': list(data.keys()) if data else []
            }), 502
        
        if not product_data:
            return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ'}), 404
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        result = {
            'id': product_data.get('id', product_id),
            'name': product_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
            'brand': product_data.get('brand', '–ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'price': product_data.get('salePriceU', 0),
            'rating': product_data.get('rating', 0),
            'feedbacks': product_data.get('feedbacks', 0),
            'quantity': product_data.get('totalQuantity', 0),
        }
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä: {result['name']}")
        return jsonify(result)
        
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API")
        return jsonify({'error': '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API'}), 504
    except requests.exceptions.ConnectionError:
        print("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API'}), 503
    except requests.exceptions.RequestException as e:
        print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}'}), 503
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'}), 500


    try:
        print(f"üîç –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ {product_id}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π URL WB API
        wb_url = f"https://card.wb.ru/cards/v4/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={product_id}"
        
        print(f"üîÑ –ü—Ä–æ–±—É–µ–º URL: {wb_url}")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        response = requests.get(
            wb_url,
            headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'Referer': 'https://www.wildberries.ru/',
                'Origin': 'https://www.wildberries.ru',
                'Sec-Fetch-Dest': 'empty',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-site',
            },
            timeout=10
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code != 200:
            return jsonify({
                'error': f'WB API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}',
                'status_code': response.status_code,
                'product_id': product_id
            }), 502
            
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = response.json()
            print(f"üì¶ JSON –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}")
            return jsonify({
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API',
                'response_preview': response.text[:200]
            }), 502
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not data:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç WB API'}), 404
            
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        product_data = None
        if data.get('data', {}).get('products'):
            product_data = data['data']['products'][0]
        elif data.get('products'):
            product_data = data['products'][0]
        else:
            print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {json.dumps(data, ensure_ascii=False)[:500]}")
            return jsonify({
                'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WB API',
                'data_structure': list(data.keys()) if data else []
            }), 502
        
        if not product_data:
            return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ'}), 404
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        result = {
            'id': product_data.get('id', product_id),
            'name': product_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
            'brand': product_data.get('brand', '–ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'price': product_data.get('salePriceU', 0),
            'rating': product_data.get('rating', 0),
            'feedbacks': product_data.get('feedbacks', 0),
            'quantity': product_data.get('totalQuantity', 0),
        }
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä: {result['name']}")
        return jsonify(result)
        
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API")
        return jsonify({'error': '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API'}), 504
    except requests.exceptions.ConnectionError:
        print("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB API'}), 503
    except requests.exceptions.RequestException as e:
        print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}'}), 503
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/debug/wb', methods=['GET'])
def debug_wb():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB"""
    test_id = 205886056
    wb_url = f"https://card.wb.ru/cards/v4/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={test_id}"
    
    try:
        print(f"üîß –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {wb_url}")
        response = requests.get(wb_url, timeout=10)
        
        debug_info = {
            'status_code': response.status_code,
            'url': wb_url,
            'headers': dict(response.headers),
            'content_type': response.headers.get('content-type'),
            'content_length': len(response.text),
            'content_preview': response.text[:500] if response.text else 'Empty response',
        }
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if 'application/json' in response.headers.get('content-type', ''):
            try:
                json_data = response.json()
                debug_info['json_structure'] = list(json_data.keys()) if json_data else []
                debug_info['json_preview'] = str(json_data)[:500]
            except:
                debug_info['json_error'] = 'Cannot parse JSON'
        
        return jsonify(debug_info)
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'type': type(e).__name__
        }), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'ok', 
        'service': 'WB API Proxy',
        'timestamp': os.times().user
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üîó –õ–æ–∫–∞–ª—å–Ω—ã–π API: {LOCAL_API_URL}")
    app.run(host='0.0.0.0', port=port, debug=True)